#+title: Emacs Config
#+author: Lucas Fernandez Cofré
#+startup: overview
#
# Documento expositivo y funcional de la configuración personal
# actualmente utilizada en el programa Emacs.
# Esta configuración se funda principalmente en algunas cosas de
# Systemcrafters, Gavin Freeborn, Jake B y obviamente, Prot.

* Inicio

Aquí se encuentran aquellas configuraciones respecto al inicio y
principalmente aquillas que apuntan a la apariencia UI.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq  frame-resize-pixelwise t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)            ; Disable the menu bar
#+end_src

* Apariencia y Comportamiento

En primer lugar configuraremos para no aparecer el alerta que viene
por defecto y que personalmente me parece molesto, y también la
configuración para que el documento vuelva al mismo lugar en que lo
habíamos dejado.

#+begin_src emacs-lisp
;; Vuelve al mismo lugar del documento
(save-place-mode 1)
;; Set up the visible bell
(setq visible-bell t)
(setq ring-bell-function 'ignore)
#+end_src

* Gestión de Paquetes

Esto es muy importante para facilitar la utilización del programa, al
menos cuando no se tiene mucha intimidad con el o experiencia. Esto
sirve para poder acceder de una manera mas simple a los principales
repositorios de paquetes que la comunidad aporta para mejorar en
diversos aspectos la utilización de Emacs.

#+begin_src emacs-lisp
(setq package-archives 
      '(("melpa" . "https://melpa.org/packages/")
        ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(setq use-package-always-ensure t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+end_src

** Instalación de Paquetes
Con los repositorios instalados podemos instalar inmediatamente
aquellos paquetes que estimemos necesarios.

#+begin_src emacs-lisp
  (use-package vertico)
  (vertico-mode 1)
  (use-package orderless)
  (setq completion-styles '(orderless))
  (use-package denote)
#+end_src

* Org

A continuación configuraremos algunas cosas que hasta el momento me
han funcionado muy bien respecto a org-mode.

#+begin_src emacs-lisp
  (require 'org)
  (setq org-agenda-start-with-log-mode t)
  (setq org-ellipsis " »")
  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (setq widget-image-enable nil)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

** Org-Agenda

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(
	("n" "Planificación"
         ((alltodo ""
		  ((org-agenda-overriding-header "Tareas por Hacer:\n")))
	  (agenda ""
		  ((org-agenda-block-separator nil)
		   (org-agenda-span 1)
		   (org-agenda-format-date "%A, %e %b %Y")
		   (org-agenda-overriding-header "\nAgenda Diaria:\n")))))
          ))
#+end_src

** Fonts


#+begin_src emacs-lisp
  (when window-system
    (let* ((variable-tuple
	    (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
		  ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
		  ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
		  ((x-list-fonts "Verdana")         '(:font "Verdana"))
		  ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
		  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
	   (base-font-color     (face-foreground 'default nil 'default))
	   (headline           `(:inherit default :weight bold :foreground ,base-font-color)))))

  (custom-theme-set-faces
    'user
    '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
    '(fixed-pitch ((t ( :family "Ubuntu Mono" :height 160)))))

  (custom-theme-set-faces
    'user
    '(org-block ((t (:inherit fixed-pitch))))
    '(org-code ((t (:inherit (shadow fixed-pitch)))))
    '(org-document-info ((t (:foreground "dark orange"))))
    '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
    '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
    '(org-link ((t (:foreground "royal blue" :underline t))))
    '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    '(org-property-value ((t (:inherit fixed-pitch))) t)
    '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
    '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
    '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

#+end_src     

* Denote
#+begin_src emacs-lisp
(require 'denote)
     ;; Remember to check the doc strings of those variables.
     (setq denote-directory (expand-file-name "~/Dropbox/notes/"))
     (setq denote-known-keywords '("emacs" "filosofi" "politica" "derecho"))
     (setq denote-infer-keywords t)
     (setq denote-sort-keywords t)
     (setq denote-file-type nil) ; Org is the default, set others here
     (setq denote-prompts '(title keywords))

     ;; Pick dates, where relevant, with Org's advanced interface:
     (setq denote-date-prompt-use-org-read-date t)

     ;; We allow multi-word keywords by default.  The author's personal
     ;; preference is for single-word keywords for a more rigid workflow.
     (setq denote-allow-multi-word-keywords t)

     (setq denote-date-format nil) ; read doc string

     ;; By default, we fontify backlinks in their bespoke buffer.
     (setq denote-link-fontify-backlinks t)

     ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit
     ;; advanced.

     ;; If you use Markdown or plain text files (Org renders links as buttons
     ;; right away)
     (add-hook 'find-file-hook #'denote-link-buttonize-buffer)

     ;; We use different ways to specify a path for demo purposes.
     (setq denote-dired-directories
           (list denote-directory
                 (thread-last denote-directory (expand-file-name "attachments"))
                 (expand-file-name "~/Dropbox/libros")))

     ;; Generic (great if you rename files Denote-style in lots of places):
     ;; (add-hook 'dired-mode-hook #'denote-dired-mode)
     ;;
     ;; OR if only want it in `denote-dired-directories':
     (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

     ;; Here is a custom, user-level command from one of the examples we
     ;; showed in this manual.  We define it here and add it to a key binding
     ;; below.
     (defun my-denote-journal ()
       "Create an entry tagged 'journal', while prompting for a title."
       (interactive)
       (denote
        (denote--title-prompt)
        '("journal")))

     ;; Denote DOES NOT define any key bindings.  This is for the user to
     ;; decide.  For example:
     (let ((map global-map))
       (define-key map (kbd "C-c n j") #'my-denote-journal) ; our custom command
       (define-key map (kbd "C-c n n") #'denote)
       (define-key map (kbd "C-c n N") #'denote-type)
       (define-key map (kbd "C-c n d") #'denote-date)
       (define-key map (kbd "C-c n s") #'denote-subdirectory)
       (define-key map (kbd "C-c n t") #'denote-template)
       ;; If you intend to use Denote with a variety of file types, it is
       ;; easier to bind the link-related commands to the `global-map', as
       ;; shown here.  Otherwise follow the same pattern for `org-mode-map',
       ;; `markdown-mode-map', and/or `text-mode-map'.
       (define-key map (kbd "C-c n i") #'denote-link) ; "insert" mnemonic
       (define-key map (kbd "C-c n I") #'denote-link-add-links)
       (define-key map (kbd "C-c n l") #'denote-link-find-file) ; "list" links
       (define-key map (kbd "C-c n b") #'denote-link-backlinks)
       ;; Note that `denote-rename-file' can work from any context, not just
       ;; Dired bufffers.  That is why we bind it here to the `global-map'.
       (define-key map (kbd "C-c n r") #'denote-rename-file)
       (define-key map (kbd "C-c n R") #'denote-rename-file-using-front-matter))

     ;; Key bindings specifically for Dired.
     (let ((map dired-mode-map))
       (define-key map (kbd "C-c C-d C-i") #'denote-link-dired-marked-notes)
       (define-key map (kbd "C-c C-d C-r") #'denote-dired-rename-marked-files)
       (define-key map (kbd "C-c C-d C-R") #'denote-dired-rename-marked-files-using-front-matter))

     (with-eval-after-load 'org-capture
       (setq denote-org-capture-specifiers "%l\n%i\n%?")
       (add-to-list 'org-capture-templates
                    '("n" "New note (with denote.el)" plain
                      (file denote-last-path)
                      #'denote-org-capture
                      :no-save t
                      :immediate-finish nil
                      :kill-buffer t
                      :jump-to-captured t)))
#+end_src     
                      
* Modus Theme
#+begin_src emacs-lisp
  (load-theme 'modus-operandi)            ; Light theme
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src     
* Latex

Esto es algo tomado de Jake B por lo que recomiendo ver su video que
dejaré por algun lado aqui.

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Key Maps

Por último, estableceremos los atajos de teclado para que alguna de
las funciones más utilizadas estén "más a la mano" a la hora de trabajar.

** Org

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-x v =") #'diff-buffer-with-file)
#+end_src

