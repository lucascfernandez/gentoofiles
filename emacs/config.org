#+title: Emacs Config
#+author: Lucas Fernandez Cofré
#+startup: overview

* Índice                                                                :TOC:
- [[#actualizar-repositorio-git][Actualizar Repositorio Git]]
-  [[#comportamiento-general][Comportamiento General]]
- [[#repositorios][Repositorios]]
- [[#packages][Packages]]
- [[#dired][Dired]]
- [[#org][Org]]
- [[#org-roam][Org-Roam]]
- [[#org-agenda][Org-Agenda]]
- [[#latex][Latex]]
- [[#key-maps][Key Maps]]
- [[#babel][Babel]]
- [[#fonts][Fonts]]

* Actualizar Repositorio Git

#+begin_src bash :result output
gitscript.sh
#+end_src

#+RESULTS:
| [main bed9071] commit de actualización por defecto para pequeñas modificaciones |                   |                |
| 2 files changed                                                                 | 212 insertions(+) | 5 deletions(-) |

*  Comportamiento General
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1) 
  (blink-cursor-mode -1)
  (load-theme 'tsdh-light t)
  (global-set-key [(control x) (k)] 'kill-this-buffer)
  (setq search-whitespace-regexp ".*")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq initial-scratch-message "\n;; ようこそルーカス、長生きする自由な知識とパリアの人々!\n\n\n")
  (setq user-full-name "Lucas Fernandez Cofré")
  ;; Muy útil para mejorar el scroll desde teclado
  (global-set-key (kbd "C-v") 'View-scroll-half-page-forward)
  (global-set-key (kbd "M-v") 'View-scroll-half-page-backward)
  ;; === Smooth scroll ==
  (setq redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1)
  (setq initial-buffer-choice (lambda () (org-roam-dailies-goto-today "d") (current-buffer)))
  #+end_src

* Repositorios
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+end_src

* Packages

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable))

  ;; Distraction-free screen
  (use-package olivetti
    :hook (org-mode . olivetti-mode)
    :bind
    (("<f9>" . olivetti-mode)))

  (use-package org-roam-ui)

  (use-package pdf-tools)
  (pdf-tools-install)

  (use-package org-noter)

  (use-package org-gtd
    :after org
    :demand t
    :custom
    (org-gtd-directory "~/org-gtd")
    (org-edna-use-inheritance t)
    :config
    (org-edna-mode)
    :bind
    (("C-c d c" . org-gtd-capture)
     ("C-c d e" . org-gtd-engage)
     ("C-c d p" . org-gtd-process-inbox)
     ("C-c d n" . org-gtd-show-all-next)
     ("C-c d s" . org-gtd-show-stuck-projects)
     :map org-gtd-process-map
     ("C-c c" . org-gtd-choose)))

  (setq org-gtd-directory "~/Dropbox/org-gtd")

  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-echo-documentation 0.25) ; Enable documentation for completions
    (corfu-preview-current 'insert) ; Do not preview current candidate
    (corfu-preselect-first nil)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-separator)
                ("TAB"     . corfu-next)
                ([tab]     . corfu-next)
                ("S-TAB"   . corfu-previous)
                ([backtab] . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"     . nil) ;; leave my enter alone!
                )

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    :config 
    (setq tab-always-indent 'complete)
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))

  (use-package consult
    :bind (("C-x b"       . consult-buffer)
           ("C-x C-k C-k" . consult-kmacro)
           ("M-y"         . consult-yank-pop)
           ("M-g g"       . consult-goto-line)
           ("M-g M-g"     . consult-goto-line)
           ("M-g i"       . consult-imenu)
           ("C-x C-SPC"   . consult-global-mark)
           ("C-x M-:"     . consult-complex-command)
           ("C-c C-a"       . consult-org-agenda)
           :map dired-mode-map
           ("O" . consult-file-externally)
           :map help-map
           ("a" . consult-apropos)
           :map minibuffer-local-map
           ("M-r" . consult-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region))
#+end_src

* Dired

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src
* Org
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-leading-stars t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300))
#+end_src

* Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
               :after org
               :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
               :custom
               (org-roam-directory (file-truename "~/Dropbox/roam/"))
               :config
               (org-roam-setup)
               :bind (("C-c n f" . org-roam-node-find)
                      ("C-c n r" . org-roam-node-random)
                      ("C-c n d" . org-roam-dailies-capture-today)
                      ("C-c n D" . org-roam-dailies-goto-today)
                      ("C-c n v" . org-roam-dailies-capture-date)
                      ("C-c n V" . org-roam-dailies-goto-date)
                      (:map org-mode-map
                            (("C-c n i" . org-roam-node-insert)
                             ("C-c n o" . org-id-get-create)
                             ("C-c n t" . org-roam-tag-add)
                             ("C-c n a" . org-roam-alias-add)
                             ("C-M-i" . completion-at-point)
                             ("C-c n l" . org-roam-buffer-toggle)))))

  (setq org-roam-capture-templates
        '(("d" "nota por defecto" plain "%?" :target
           (file+head "${slug}.org" "#+title: ${title}")
           :unnarrowed t)
          ("l" "Notas Libro" plain
           (file "~/Dropbox/roam/templates/libros.org")
           :if-new (file+head "${slug}.org" "#+title: ${title}\n#+filetags: libros")
           :unnarrowed t)))

  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              ))

  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))

  ;; Journal Org-Dailies
  (require 'org-roam-dailies)
  (setq org-roam-dailies-directory "~/Dropbox/journal")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))

  (org-roam-db-autosync-mode)

  (setq org-roam-node-display-template "${title:*} ${tags:30}")
#+end_src

* Org-Agenda

#+begin_src emacs-lisp
  ;; Calendar
  (setq calendar-date-style 'iso)
  (setq calendar-week-start-day 1)
  (setq calendar-day-header-array ["Do" "Lu" "Ma" "Mi" "Ju" "Vi" "Sá"])
  (setq calendar-day-name-array ["domingo" "lunes" "martes" "miércoles" "jueves" "viernes" "sábado"])
  (setq calendar-month-abbrev-array ["Ene" "Feb" "Mar" "Abr" "May" "Jun" "Jul" "Ago" "Sep" "Oct" "Nov" "Dic"])
  (setq calendar-month-name-array ["enero" "febrero" "marzo" "abril" "mayo" "junio" "julio" "agosto" "septiembre" "octubre" "noviembre" "diciembre"])
  ;; Diary
  (setq diary-file "~/Dropbox/diary")
  (setq org-agenda-diary-file "~/Dropbox/diary")
  (setq org-agenda-include-diary t)
  (appt-activate 1) ;; siempre debe ir después de establecer el archivo
  ;; Agenda
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-ellipsis " ▼ ")

  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)

  (setq org-return-follows-link t)
#+end_src

* Latex

Esto es algo tomado de Jake B por lo que recomiendo ver su video que
dejaré por algun lado [[https://jakebox.github.io/youtube/org_latex_video.html][aquí]].

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Key Maps

Por último, estableceremos los atajos de teclado para que alguna de
las funciones más utilizadas estén "más a la mano" a la hora de trabajar.

#+begin_src emacs-lisp
  ;; Org
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  ;; Buffer
  (global-set-key (kbd "C-x v =") #'diff-buffer-with-file)
  ;; Utilities
  (global-set-key (kbd "C-x c") 'calendar)
  ;; Comportamiento
  (global-set-key (kbd "M-i") 'consult-outline)

#+end_src

* Babel

Esto es para evaluar comandos en shell desde un documento org.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((shell . t)))
#+end_src
* Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "DejaVu Sans Mono" :weight 'light :height 140)
  (set-face-attribute 'bold nil
                      :family "Roboto Mono" :weight 'regular)
  (set-face-attribute 'italic nil
                      :family "Victor Mono" :weight 'semilight :slant 'italic)
  (set-fontset-font t 'unicode
                    (font-spec :name "Inconsolata Light" :size 16) nil)
  (set-fontset-font t '(#xe000 . #xffdd)
                    (font-spec :name "RobotoMono Nerd Font" :size 12) nil)
#+end_src

#_. Dummy outline topic header -- see ‘allout-mode’ docstring: ‘C-h m’.
#_. Local emacs vars.
#_ , Local variables:
#_ , allout-layout: (-1 : 0)
#_ , End:

